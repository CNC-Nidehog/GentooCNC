--- machinetalk/webtalk/webtalk_defaultpolicy.cc.old	2016-05-02 07:12:17.927277919 +0200
+++ machinetalk/webtalk/webtalk_defaultpolicy.cc	2016-05-02 07:12:35.337277815 +0200
@@ -42,7 +42,7 @@
 	    const char *identity = NULL;
 	    wss->txmode = LWS_WRITE_BINARY;
 	    UriQueryListA *q = wss->queryList;
-	    int fd = libwebsocket_get_socket_fd(wss->wsiref);
+	    int fd = lws_get_socket_fd(wss->wsiref);
 
 	    while (q != NULL) {
 		lwsl_uri("%s %d: key='%s' value='%s'\n",
--- machinetalk/webtalk/webtalk.hh.old	2016-05-02 06:59:50.790615716 +0200
+++ machinetalk/webtalk/webtalk.hh	2016-05-02 07:22:42.950607519 +0200
@@ -124,7 +124,7 @@
     void *socket; // zmq destination
     zmq_pollitem_t pollitem;
     int socket_type;
-    libwebsocket_write_protocol txmode;
+    lws_write_protocol txmode;
 
     void *wsq_in;
     void *wsq_out;
@@ -145,8 +145,8 @@
     size_t already_sent; // how much of current was sent already
 
     // needed for websocket writable callback
-    struct libwebsocket *wsiref;
-    struct libwebsocket_context *ctxref;
+    struct lws *wsiref;
+    struct lws_context *ctxref;
 
     // URI/args state
     UriUriA u;
@@ -204,7 +204,7 @@
     pb::Container tx; // tx must be Clear()'d after or before use
 
     zlist_t *policies;
-    struct libwebsocket_context *wsctx;
+    struct lws_context *wsctx;
     int service_timer;
 
     mk_netopts_t netopts;
@@ -226,9 +226,9 @@
 void echo_thread(void *args, zctx_t *ctx, void *pipe);
 
 // webtalk_proxy.cc:
-int callback_http(struct libwebsocket_context *context,
-		  struct libwebsocket *wsi,
-		  enum libwebsocket_callback_reasons reason, void *user,
+int callback_http(
+		  struct lws *wsi,
+		  enum lws_callback_reasons reason, void *user,
 		  void *in, size_t len);
 int wt_proxy_new(wtself_t *self);
 int wt_proxy_add_policy(wtself_t *self, const char *name, zwscvt_cb cb);
@@ -247,5 +247,5 @@
 int wt_add_plugin(wtself_t *self, const char *sopath);
 
 // webtalk_initproto.cc
-extern struct libwebsocket_protocols *protocols;
+extern struct lws_protocols *protocols;
 void init_protocols(void);
--- machinetalk/webtalk/webtalk_initproto.cc.old	2016-05-02 07:13:06.297277630 +0200
+++ machinetalk/webtalk/webtalk_initproto.cc	2016-05-02 07:14:24.070610499 +0200
@@ -3,7 +3,7 @@
 #include "webtalk.hh"
 
 
-struct libwebsocket_protocols *protocols;
+struct lws_protocols *protocols;
 
 #ifdef EXPERIMENTAL_ZWS_SUPPORT
 #define NPROTOS 6
@@ -14,9 +14,9 @@
 void init_protocols(void)
 {
     // size must be number of protos + 1 - libwebsockets requires a zero delimiter struct
-    struct libwebsocket_protocols *p = protocols = 
-	(struct libwebsocket_protocols *) calloc(NPROTOS,
-						 sizeof (struct libwebsocket_protocols));
+    struct lws_protocols *p = protocols = 
+	(struct lws_protocols *) calloc(NPROTOS,
+						 sizeof (struct lws_protocols));
     assert(p != 0);
 
     //  first protocol must always be HTTP handler
--- machinetalk/webtalk/webtalk_main.cc.old	2016-05-02 07:23:07.177274041 +0200
+++ machinetalk/webtalk/webtalk_main.cc	2016-05-02 07:23:38.367273854 +0200
@@ -59,7 +59,7 @@
     if (self->cfg->trap_signals)
 	zloop_poller(self->netopts.z_loop, &signal_poller, handle_signal, self);
 
-    if ((self->wsctx = libwebsocket_create_context(&self->cfg->info)) == NULL) {
+    if ((self->wsctx = lws_create_context(&self->cfg->info)) == NULL) {
 	lwsl_err("libwebsocket_create_context failed\n");
 	return -1;
     }
@@ -86,7 +86,7 @@
     if (self->service_timer)
 	zloop_timer_end (self->netopts.z_loop, self->service_timer);
 
-    libwebsocket_context_destroy(self->wsctx);
+    lws_context_destroy(self->wsctx);
 
     syslog_async(LOG_INFO,
 		 "%s: exiting mainloop (%s)\n",
@@ -197,7 +197,7 @@
     if (flag) conf->info.options |= LWS_SERVER_OPTION_DISABLE_OS_CA_CERTS;
 
     iniFindInt(inifp, "EXTENSIONS",  conf->section, &flag);
-    if (flag) conf->info.extensions = libwebsocket_get_internal_extensions();
+    if (flag) conf->info.extensions = lws_get_internal_extensions();
     iniFindInt(inifp, "TIMER", conf->section, &conf->service_timer);
 
     str_inidefault(&conf->index_html, inifp, "INDEX_HTML", conf->section);
--- machinetalk/webtalk/webtalk_wsproxy.cc.old	2016-05-02 07:01:53.857281647 +0200
+++ machinetalk/webtalk/webtalk_wsproxy.cc	2016-05-02 07:10:32.870611880 +0200
@@ -71,7 +71,7 @@
 	return -1;
 
     // start watching the zmq socket
-    wtself_t *self = (wtself_t *) libwebsocket_context_user(wss->ctxref);
+    wtself_t *self = (wtself_t *) lws_context_user(wss->ctxref);
 
     wss->pollitem.socket =  wss->socket;
     wss->pollitem.fd = 0;
@@ -85,7 +85,7 @@
 int
 service_timer_callback(zloop_t *loop, int  timer_id, void *context)
 {
-    libwebsocket_service ((struct libwebsocket_context *) context, 0);
+    lws_service ((struct lws_context *) context, 0);
     return 0;
 }
 
@@ -131,8 +131,8 @@
 }
 
 // serves files via HTTP from www_dir if not NULL
-static int serve_http(struct libwebsocket_context *context,
-		      wtself_t *self, struct libwebsocket *wsi,
+static int serve_http(struct lws_context *context,
+		      wtself_t *self, struct lws *wsi,
 		      void *in, size_t len)
 {
     const char *ext, *mt = NULL;
@@ -173,15 +173,15 @@
 			      "<address>webtalk Port %d</address>"
 			      "</body></html>",
 			      (char *)in,buf, self->cfg->info.port);
-	libwebsocket_write (wsi, (unsigned char *)m404, len, LWS_WRITE_HTTP);
+	lws_write (wsi, (unsigned char *)m404, len, LWS_WRITE_HTTP);
 	return -1;
     }
     lwsl_debug("serving '%s' mime type='%s'\n", buf, mt);
 #ifdef LWS_FEATURE_SERVE_HTTP_FILE_HAS_OTHER_HEADERS_LEN
-    if (libwebsockets_serve_http_file(context, wsi, buf, mt, NULL, 0))
+    if (lws_serve_http_file(wsi, buf, mt, NULL, 0))
         return -1;
 #else
-    if (libwebsockets_serve_http_file(context, wsi, buf, mt, NULL))
+    if (lws_serve_http_file(wsi, buf, mt, NULL))
         return -1;
 #endif
     return 0;
@@ -189,16 +189,16 @@
 
 // HTTP + Websockets server
 int
-callback_http(struct libwebsocket_context *context,
-	      struct libwebsocket *wsi,
-	      enum libwebsocket_callback_reasons reason, void *user,
+callback_http(struct lws_context *context,
+	      struct lws *wsi,
+	      enum lws_callback_reasons reason, void *user,
 	      void *in, size_t len)
 {
 
 
     zws_session_t *wss = (zws_session_t *)user;
-    wtself_t *self = (wtself_t *) libwebsocket_context_user(context);
-    struct libwebsocket_pollargs *pa = (struct libwebsocket_pollargs *)in;
+    wtself_t *self = (wtself_t *) lws_context_user(context);
+    struct lws_pollargs *pa = (struct lws_pollargs *)in;
 
     switch (reason) {
 
@@ -207,7 +207,7 @@
 	{
 	    char client_name[128];
 	    char client_ip[128];
-	    libwebsockets_get_peer_addresses(context, wsi, (int)(long)in, client_name,
+	    lws_get_peer_addresses(wsi, (int)(long)in, client_name,
 					     sizeof(client_name),
 					     client_ip,
 					     sizeof(client_ip));
@@ -225,7 +225,7 @@
 	// websockets support
     case LWS_CALLBACK_FILTER_PROTOCOL_CONNECTION:
 	{
-	    int fd = libwebsocket_get_socket_fd(wsi);
+	    int fd = lws_get_socket_fd(wsi);
 
 	    // parse URI and query
 	    // set policy if contained in query
@@ -246,7 +246,7 @@
 	    lws_hdr_copy(wsi, geturi, sizeof geturi, WSI_TOKEN_GET_URI);
 	    int arglen = lws_hdr_copy(wsi, uriargs, sizeof uriargs, WSI_TOKEN_HTTP_URI_ARGS);
 
-	    const struct libwebsocket_protocols *proto = libwebsockets_get_protocol(wsi);
+	    const struct lws_protocols *proto = lws_get_protocol(wsi);
 
 	    lwsl_uri("%s %d: proto='%s' uri='%s' args='%s'\n",
 		     __func__, fd, proto->name, geturi, uriargs);
@@ -343,14 +343,14 @@
 		    // enlarge as needed
 		    needed += LWS_TXBUFFER_EXTRA;
 		    lwsl_info("Websocket %d: enlarge txbuf %d to %d\n",
-			     libwebsocket_get_socket_fd(wsi), wss->txbufsize, needed);
+			     lws_get_socket_fd(wsi), wss->txbufsize, needed);
 		    free(wss->txbuffer);
 		    wss->txbuffer = (unsigned char *) zmalloc(needed);
 		    assert(wss->txbuffer);
 		    wss->txbufsize = needed;
 		}
 		memcpy(&wss->txbuffer[LWS_SEND_BUFFER_PRE_PADDING], zframe_data(f), n);
-		m = libwebsocket_write(wsi, &wss->txbuffer[LWS_SEND_BUFFER_PRE_PADDING],
+		m = lws_write(wsi, &wss->txbuffer[LWS_SEND_BUFFER_PRE_PADDING],
 				       n, wss->txmode);
 		assert(m == n);  // library must handle this case
 		zframe_destroy(&f);
@@ -366,7 +366,7 @@
 
 		    zloop_poller_end (self->netopts.z_loop, &wss->wsqin_pollitem);
 		    wss->wsqin_poller_active = false;
-		    libwebsocket_callback_on_writable(context, wsi);
+		    lws_callback_on_writable(wsi);
 		    break;
 		}
 	    } while (1);
@@ -382,7 +382,7 @@
 
 	    lwsl_info("Websocket %d stats: in %d/%d out"
 		      " %d/%d zmq %d/%d partial=%d retry=%d complete=%d txbuf=%d\n",
-		      libwebsocket_get_socket_fd(wsi), wss->wsin_msgs, wss->wsin_bytes,
+		      lws_get_socket_fd(wsi), wss->wsin_msgs, wss->wsin_bytes,
 		      wss->wsout_msgs, wss->wsout_bytes,
 		      wss->zmq_msgs, wss->zmq_bytes,
 		      wss->partial, wss->partial_retry, wss->completed,
@@ -470,7 +470,7 @@
 
     pollstruct.fd = item->fd;
     pollstruct.revents = pollstruct.events = pevents;
-    libwebsocket_service_fd((struct libwebsocket_context *)context, &pollstruct);
+    lws_service_fd((struct lws_context *)context, &pollstruct);
     return 0;
 }
 
@@ -478,7 +478,7 @@
 zmq_socket_readable(zloop_t *loop, zmq_pollitem_t *item, void *arg)
 {
     zws_session_t *wss = (zws_session_t *)arg;
-    wtself_t *self = (wtself_t *) libwebsocket_context_user(wss->ctxref);
+    wtself_t *self = (wtself_t *) lws_context_user(wss->ctxref);
     return wss->policy(self, wss, ZWS_TO_WS);
 }
 
@@ -486,7 +486,7 @@
 wsqin_socket_readable(zloop_t *loop, zmq_pollitem_t *item, void *arg)
 {
     zws_session_t *wss = (zws_session_t *)arg;
-    libwebsocket_callback_on_writable(wss->ctxref, wss->wsiref);
+    lws_callback_on_writable(wss->wsiref);
     return 0;
 }
 
